@using MudBlazor
@using Microsoft.Extensions.Localization
@using student_management_fe.Resources
@using FluentValidation
@inject Radzen.DialogService DialogService
@inject ISnackbar Snackbar

<MudStack Style="width: 100%">
    <MudForm Model="@_model"
    @bind-IsValid="_isValid"
    @bind-IsTouched="_isTouched">
        <MudItem xs="12">
            <MudFileUpload T="IBrowserFile"
            @ref="@_fileUpload"
            @bind-Files="_model.File"
            For="@(() => _model.File)"
            AppendMultipleFiles="false"
            Hidden="@false"
            InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
            InputStyle="opacity:0"
            ErrorText="@string.Empty"
            Accept="@(AllowedExtensions[0])"
            @ondrop="@ClearDragClass"
            @ondragenter="@SetDragClass"
            @ondragleave="@ClearDragClass"
            @ondragend="@ClearDragClass">
                <ActivatorContent>
                    <MudPaper Height="300px"
                    Outlined="true"
                    Class="@_dragClass">
                        <MudText Typo="Typo.h6">
                            @_localizer["upload_file_form_tip"]
                        </MudText>
                        @if (_model.File != null)
                        {
                            <MudChip T="string" Color="Color.Dark" Text="@_model.File.Name" />
                        }
                    </MudPaper>
                </ActivatorContent>
            </MudFileUpload>
            <MudToolBar Gutters="@false"
            Class="relative d-flex justify-end gap-4">
                <MudButton Color="Color.Primary"
                Disabled="@(!_isValid || !_isTouched || _model.File is null)"
                OnClick="@UploadFiles"
                Variant="MudBlazor.Variant.Filled">
                    @_localizer["upload_file_form_upload"]
                </MudButton>
                <MudButton Color="Color.Error"
                Disabled="@(_model.File is null)"
                OnClick="@ClearAsync"
                Variant="MudBlazor.Variant.Filled">
                    @_localizer["upload_file_form_delete"]
                </MudButton>
            </MudToolBar>
        </MudItem>
    </MudForm>
</MudStack>

@code {
    [Parameter] public string[] AllowedExtensions { get; set; } = new string[] { };
#nullable enable

    public class Model
    {
        public IBrowserFile? File { get; set; }  
    }
    [Inject] private IStringLocalizer<Content> _localizer { get; set; }
    private Model _model = new();

    private MudFileUpload<IBrowserFile>? _fileUpload;
    private bool _isValid;
    private bool _isTouched;
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;

    private async Task UploadFiles()
    {
        if (_model.File == null)
        {
            Snackbar.Add(_localizer["upload_file_form_at_least_warning"], MudBlazor.Severity.Warning);
            return;
        }

        // Kiểm tra kích thước file < 5MB
        if (_model.File.Size > 5 * 1024 * 1024)
        {
            Snackbar.Add(_localizer["upload_file_form_size_warning"], MudBlazor.Severity.Warning);
            return;
        }

        // Kiểm tra định dạng file
        if (!AllowedExtensions.Contains(Path.GetExtension(_model.File.Name).ToLower()))
        {
            var message = _localizer["upload_file_form_format_warning"];
            Snackbar.Add($"{message}: {string.Join(", ", AllowedExtensions)} !", MudBlazor.Severity.Warning);
            return;
        }

        DialogService.Close(_model.File);
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private Task ClearAsync()
        => _fileUpload?.ClearAsync() ?? Task.CompletedTask;
}